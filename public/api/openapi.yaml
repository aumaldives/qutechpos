openapi: 3.0.3
info:
  title: IsleBooks POS API
  description: |
    Comprehensive REST API for IsleBooks Point of Sale system, providing complete business management capabilities including products, contacts, transactions, payments, and analytics.
    
    ## Authentication
    All API endpoints require authentication via API Key. Include your API key in one of these ways:
    - **Header**: `Authorization: Bearer YOUR_API_KEY`
    - **Header**: `X-API-Key: YOUR_API_KEY`  
    - **Query**: `?api_key=YOUR_API_KEY`
    
    ## Permissions
    API keys support granular permissions:
    - **read**: View data
    - **write**: Create and update data
    - **delete**: Remove data
    - **products**: Product and inventory management
    - **contacts**: Customer and supplier management
    - **transactions**: Sales and purchase management
    - **reports**: Analytics and reporting access
    - **hrm**: Human resource management and attendance
    
    ## Rate Limiting
    All endpoints are subject to rate limiting based on your API key configuration. Check response headers for limit information.
    
    ## Common Use Cases
    
    ### Product Lookup by SKU
    ```
    GET /products?search=ABC123
    ```
    Search for products by SKU code, product name, or description using the `search` parameter.
    
    ### Get Product with Stock Levels
    ```
    GET /products/{id}?include_variations=true&include_stock=true
    ```
    Retrieve complete product information including all variations and current stock levels.
    
    
  version: '3.1.0'
  contact:
    name: IsleBooks API Support
    url: https://pos.islebooks.mv/api-docs
  license:
    name: Proprietary
    
servers:
  - url: https://pos.islebooks.mv/api/v1
    description: Production API Server
  - url: http://localhost/api/v1
    description: Development API Server

security:
  - ApiKeyAuth: []
  - BearerAuth: []

paths:
  # Status and Health
  /ping:
    get:
      tags:
        - Health
      summary: API Health Check
      description: Verify API connectivity and authentication
      responses:
        '200':
          description: API is healthy and authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "API is working"
                  timestamp:
                    type: string
                    format: date-time
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Products API
  /products:
    get:
      tags:
        - Products
      summary: List Products
      description: |
        Retrieve a paginated list of products with advanced filtering options and location-specific stock information.
        
        **Location Support**:
        - `location_id` is **optional** for listing products
        - If provided: returns stock information for that specific location only  
        - If not provided: returns stock information for all locations
        - Supports both location codes (BL0003) and table IDs
      parameters:
        - name: location_id
          in: query
          description: Optional location ID (code like BL0003 or table ID) to filter stock information
          schema:
            type: string
            example: "BL0003"
        - name: search
          in: query
          description: |
            **Search products by name, SKU, or description**
            
            Supports partial matching across:
            - Product name
            - **SKU code** (exact or partial match)
            - Product description
            
            Examples:
            - `?search=ABC123` - Find products with SKU containing "ABC123"
            - `?search=iPhone` - Find products with "iPhone" in name or description
          schema:
            type: string
          example: "ABC123"
        - name: category_id
          in: query
          description: Filter by category ID
          schema:
            type: integer
        - name: brand_id
          in: query
          description: Filter by brand ID
          schema:
            type: integer
        - name: is_active
          in: query
          description: Filter by active status
          schema:
            type: boolean
        - name: has_stock
          in: query
          description: Filter products that have stock
          schema:
            type: boolean
        - name: per_page
          in: query
          description: Number of items per page (1-100)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 15
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Products retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      tags:
        - Products
      summary: Create Product
      description: |
        Create a new product with variations and opening stock.
        
        **Location Requirement**:
        - `opening_stock` is **required** and must contain at least one location
        - Each location must belong to your business  
        - Supports both location codes (BL0003) and table IDs
        - Stock will be set for each specified location
        
        **Easy Testing**:
        - Use `category_name` instead of `category_id` for automatic category creation
        - Use `brand_name` instead of `brand_id` for automatic brand creation
        - Only `name`, `unit_id`, and `opening_stock` are required
      parameters:
        - name: auto_sku
          in: query
          description: "Auto-generate SKU from product name"
          required: false
          schema:
            type: boolean
            default: false
        - name: enable_stock
          in: query
          description: "Enable stock tracking for this product"
          required: false
          schema:
            type: boolean
            default: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - unit_id
                - opening_stock
              properties:
                # === REQUIRED FIELDS ===
                name:
                  type: string
                  maxLength: 255
                  description: "**REQUIRED** - Product name"
                  example: "iPhone 15 Pro"
                unit_id:
                  type: integer
                  description: "**REQUIRED** - Unit ID (use /api/v1/business/units to get IDs)"
                  example: 1
                opening_stock:
                  type: array
                  minItems: 1
                  description: "**REQUIRED** - Opening stock for locations (at least one required)"
                  items:
                    type: object
                    required:
                      - location_id
                      - quantity
                      - unit_price
                    properties:
                      location_id:
                        type: string
                        description: "Location ID (use location codes like BL0003 or get from /api/v1/pos/business-info)"
                        example: "BL0003"
                      quantity:
                        type: number
                        format: float
                        minimum: 0
                        description: Opening stock quantity
                        example: 100.0
                      unit_price:
                        type: number
                        format: float
                        minimum: 0
                        description: Unit price for this stock
                        example: 800.00

                # === CATEGORY (Optional - either category_id OR category_name) ===
                category_id:
                  type: integer
                  description: "Category ID (use either this OR category_name)"
                  example: 1
                category_name:
                  type: string
                  maxLength: 255
                  description: "Category name (auto-creates if doesn't exist, case-insensitive)"
                  example: "Electronics"
                  
                # === OPTIONAL FIELDS ===
                type:
                  type: string
                  enum: [single, variable, combo]
                  description: "Product type (defaults to 'single')"
                  example: "single"
                  default: "single"
                sku:
                  type: string
                  maxLength: 255
                  description: "SKU code for the product"
                  example: "IPH15PRO"
                barcode_type:
                  type: string
                  enum: [C128, C39, EAN13, EAN8, UPCA, UPCE]
                  description: "Barcode type"
                  example: "EAN13"
                sub_category_id:
                  type: integer
                  description: "Sub-category ID"
                  example: 2
                  
                # === BRAND (Optional - either brand_id OR brand_name) ===
                brand_id:
                  type: integer
                  description: "Brand ID (use either this OR brand_name)"
                  example: 1
                brand_name:
                  type: string
                  maxLength: 255
                  description: "Brand name (auto-creates if doesn't exist, case-insensitive)"
                  example: "Apple"
                
                # === PRICING (For single products) ===
                default_purchase_price:
                  type: number
                  format: float
                  minimum: 0
                  description: "Purchase price (for single products)"
                  example: 800.00
                default_sell_price:
                  type: number
                  format: float
                  minimum: 0
                  description: "Selling price (for single products)"
                  example: 1200.00
                profit_percent:
                  type: number
                  format: float
                  minimum: 0
                  maximum: 100
                  description: "Profit percentage"
                  example: 50.0
                
                # === TAX & SETTINGS ===
                tax:
                  type: number
                  format: float
                  minimum: 0
                  maximum: 100
                  description: "Tax percentage"
                  example: 5.0
                tax_type:
                  type: string
                  enum: [exclusive, inclusive]
                  description: "Tax type"
                  example: "exclusive"
                  default: "exclusive"
                enable_stock:
                  type: boolean
                  description: "Enable stock tracking"
                  example: true
                  default: true
                alert_quantity:
                  type: number
                  format: float
                  minimum: 0
                  description: "Alert when stock goes below this quantity"
                  example: 5.0
                weight:
                  type: number
                  format: float
                  minimum: 0
                  description: "Product weight"
                  example: 0.5
                warranty_id:
                  type: integer
                  description: "Warranty ID"
                  example: 1
                is_inactive:
                  type: boolean
                  description: "Whether product is inactive"
                  example: false
                  default: false
                not_for_selling:
                  type: boolean
                  description: "Whether product is not for selling"
                  example: false
                  default: false
                product_description:
                  type: string
                  maxLength: 1000
                  description: "Product description"
                  example: "Latest iPhone with advanced features"
                
                # === VARIATIONS (Only for variable products) ===
                variations:
                  type: array
                  description: "Product variations (only needed for variable products, leave empty for single products)"
                  items:
                    type: object
                    required:
                      - name
                      - default_purchase_price
                      - default_sell_price
                    properties:
                      name:
                        type: string
                        maxLength: 255
                        description: "Variation name"
                        example: "256GB Space Black"
                      default_purchase_price:
                        type: number
                        format: float
                        minimum: 0
                        description: "Purchase price for this variation"
                        example: 800.00
                      default_sell_price:
                        type: number
                        format: float
                        minimum: 0
                        description: "Selling price for this variation"
                        example: 1200.00
                      profit_percent:
                        type: number
                        format: float
                        minimum: 0
                        maximum: 100
                        description: "Profit percentage"
                        example: 50.0
                      sub_sku:
                        type: string
                        maxLength: 255
                        description: "Sub-SKU for this variation"
                        example: "IPH15PRO-256GB"
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - name
                - unit_id
                - opening_stock
              properties:
                name:
                  type: string
                  description: "Product name"
                  example: "iPhone 15 Pro"
                unit_id:
                  type: integer
                  description: "Unit ID"
                  example: 1
                category_name:
                  type: string
                  description: "Category name (auto-creates if doesn't exist)"
                  example: "Electronics"
                brand_name:
                  type: string
                  description: "Brand name (auto-creates if doesn't exist)"
                  example: "Apple"
                sku:
                  type: string
                  description: "SKU code"
                  example: "IPH15PRO"
                default_purchase_price:
                  type: number
                  description: "Purchase price"
                  example: 800.00
                default_sell_price:
                  type: number
                  description: "Selling price"
                  example: 1200.00
                product_description:
                  type: string
                  description: "Product description"
                  example: "Latest iPhone with advanced features"
                opening_stock:
                  type: string
                  description: "Opening stock JSON: [{'location_id': 'BL0003', 'quantity': 50, 'unit_price': 800.00}]"
                  example: "[{\"location_id\": \"BL0003\", \"quantity\": 50, \"unit_price\": 800.00}]"
            examples:
              minimal_product:
                summary: "⭐ Minimal Product (Easiest Testing)"
                description: "Use this example for quick testing - only required fields"
                value:
                  name: "Test Product"
                  unit_id: 1
                  opening_stock:
                    - location_id: "BL0003"
                      quantity: 10
                      unit_price: 100.00
              simple_product:
                summary: "📱 Simple Product (Recommended)"
                description: "Recommended for most testing - includes category and pricing"
                value:
                  name: "iPhone 15 Pro"
                  unit_id: 1
                  category_name: "Electronics"
                  brand_name: "Apple"
                  sku: "IPH15PRO"
                  default_purchase_price: 800.00
                  default_sell_price: 1200.00
                  opening_stock:
                    - location_id: "BL0003"
                      quantity: 50
                      unit_price: 800.00
              variable_product:
                summary: "🔀 Variable Product (Advanced)"
                description: "For products with multiple variations (sizes, colors, etc.)"
                value:
                  name: "iPhone 15 Series"
                  type: "variable"
                  unit_id: 1
                  category_name: "Electronics"
                  brand_name: "Apple"
                  variations:
                    - name: "128GB Space Black"
                      default_purchase_price: 750.00
                      default_sell_price: 1100.00
                      sub_sku: "IPH15-128GB"
                    - name: "256GB Space Black"
                      default_purchase_price: 850.00
                      default_sell_price: 1300.00
                      sub_sku: "IPH15-256GB"
                  opening_stock:
                    - location_id: "BL0003"
                      quantity: 25
                      unit_price: 750.00
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '422':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /products/{id}:
    get:
      tags:
        - Products
      summary: Get Product Details
      description: Retrieve detailed information about a specific product including variations and stock
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: integer
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product retrieved successfully"
                  data:
                    $ref: '#/components/schemas/Product'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Categories API
  /categories:
    get:
      tags:
        - Categories
      summary: List Categories
      description: Retrieve a paginated list of product categories with optional sub-categories
      parameters:
        - name: search
          in: query
          description: Search categories by name or short code
          schema:
            type: string
        - name: parent_only
          in: query
          description: Return only parent categories (default true)
          schema:
            type: boolean
            default: true
        - name: include_sub_categories
          in: query
          description: Include sub-categories in response
          schema:
            type: boolean
        - name: per_page
          in: query
          description: Number of items per page (1-100)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 15
      responses:
        '200':
          description: Categories retrieved successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      tags:
        - Categories
      summary: Create Category
      description: |
        Create a new product category.
        
        **Required Fields**:
        - `name` - Category name (will check for duplicates case-insensitively)
        
        **Optional Fields**:
        - `parent_id` - Set parent category for sub-category creation
        - `short_code` - Short code for the category
        - `description` - Category description
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  maxLength: 255
                  description: Category name
                  example: "Electronics"
                short_code:
                  type: string
                  maxLength: 10
                  description: Short code for category
                  example: "ELEC"
                parent_id:
                  type: integer
                  description: Parent category ID for sub-categories
                  example: 1
                description:
                  type: string
                  maxLength: 1000
                  description: Category description
                  example: "Electronic devices and gadgets"
            examples:
              main_category:
                summary: "Main Category"
                value:
                  name: "Electronics"
                  short_code: "ELEC"
                  description: "Electronic devices and gadgets"
              sub_category:
                summary: "Sub Category"
                value:
                  name: "Smartphones"
                  parent_id: 1
                  description: "Mobile phones and smartphones"
      responses:
        '201':
          description: Category created successfully
        '422':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /categories/dropdown:
    get:
      tags:
        - Categories
      summary: Get Categories Dropdown
      description: Get categories formatted for dropdown/select lists
      responses:
        '200':
          description: Categories dropdown retrieved successfully

  /categories/hierarchical:
    get:
      tags:
        - Categories
      summary: Get Hierarchical Categories
      description: |
        Get categories with their sub-categories in hierarchical format.
        
        **Behavior**:
        - Without `per_page` parameter: Returns ALL categories (no pagination)
        - With `per_page` parameter: Returns paginated parent categories with their sub-categories loaded
      parameters:
        - name: per_page
          in: query
          description: "Number of parent categories per page (1-100). If provided, enables pagination."
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Hierarchical categories retrieved successfully

  /categories/{id}:
    get:
      tags:
        - Categories
      summary: Get Category Details
      description: Retrieve detailed information about a specific category
      parameters:
        - name: id
          in: path
          required: true
          description: Category ID
          schema:
            type: integer
        - name: include_sub_categories
          in: query
          description: Include sub-categories in response
          schema:
            type: boolean
      responses:
        '200':
          description: Category retrieved successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
    put:
      tags:
        - Categories
      summary: Update Category
      description: Update an existing category
      parameters:
        - name: id
          in: path
          required: true
          description: Category ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 255
                  description: Category name
                  example: "Electronics Updated"
                short_code:
                  type: string
                  maxLength: 10
                  description: Short code for category
                  example: "ELEC"
                parent_id:
                  type: integer
                  description: Parent category ID
                  example: 1
                description:
                  type: string
                  maxLength: 1000
                  description: Category description
                  example: "Updated description"
      responses:
        '200':
          description: Category updated successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - Categories
      summary: Delete Category
      description: |
        Delete a category (soft delete).
        
        **Restrictions**:
        - Cannot delete categories with sub-categories
        - Cannot delete categories used by products
      parameters:
        - name: id
          in: path
          required: true
          description: Category ID
          schema:
            type: integer
      responses:
        '200':
          description: Category deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: Cannot delete category (has sub-categories or used by products)
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Brands API
  /brands:
    get:
      tags:
        - Brands
      summary: List Brands
      description: Retrieve a paginated list of brands
      parameters:
        - name: search
          in: query
          description: Search brands by name or description
          schema:
            type: string
        - name: use_for_repair
          in: query
          description: Filter by repair usage
          schema:
            type: boolean
        - name: per_page
          in: query
          description: Number of items per page (1-100)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 15
      responses:
        '200':
          description: Brands retrieved successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      tags:
        - Brands
      summary: Create Brand
      description: |
        Create a new brand.
        
        **Required Fields**:
        - `name` - Brand name (will check for duplicates case-insensitively)
        
        **Optional Fields**:
        - `description` - Brand description
        - `use_for_repair` - Whether brand is used for repair services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  maxLength: 255
                  description: Brand name
                  example: "Apple"
                description:
                  type: string
                  maxLength: 1000
                  description: Brand description
                  example: "Apple Inc. products"
                use_for_repair:
                  type: boolean
                  description: Whether brand is used for repair services
                  example: true
            examples:
              electronics_brand:
                summary: "Electronics Brand"
                value:
                  name: "Apple"
                  description: "Apple Inc. electronics and devices"
                  use_for_repair: true
              regular_brand:
                summary: "Regular Brand"
                value:
                  name: "Generic Brand"
                  description: "Generic products"
      responses:
        '201':
          description: Brand created successfully
        '422':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /brands/dropdown:
    get:
      tags:
        - Brands
      summary: Get Brands Dropdown
      description: Get brands formatted for dropdown/select lists
      parameters:
        - name: filter_repair
          in: query
          description: Filter brands that are used for repair
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Brands dropdown retrieved successfully

  /brands/{id}:
    get:
      tags:
        - Brands
      summary: Get Brand Details
      description: Retrieve detailed information about a specific brand
      parameters:
        - name: id
          in: path
          required: true
          description: Brand ID
          schema:
            type: integer
      responses:
        '200':
          description: Brand retrieved successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
    put:
      tags:
        - Brands
      summary: Update Brand
      description: Update an existing brand
      parameters:
        - name: id
          in: path
          required: true
          description: Brand ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 255
                  description: Brand name
                  example: "Apple Updated"
                description:
                  type: string
                  maxLength: 1000
                  description: Brand description
                  example: "Updated Apple description"
                use_for_repair:
                  type: boolean
                  description: Whether brand is used for repair services
                  example: true
      responses:
        '200':
          description: Brand updated successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - Brands
      summary: Delete Brand
      description: |
        Delete a brand (soft delete).
        
        **Restrictions**:
        - Cannot delete brands used by products
      parameters:
        - name: id
          in: path
          required: true
          description: Brand ID
          schema:
            type: integer
      responses:
        '200':
          description: Brand deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: Cannot delete brand (used by products)
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Contacts API
  /contacts:
    get:
      tags:
        - Contacts
      summary: List Contacts
      description: Retrieve a paginated list of customers and suppliers
      parameters:
        - name: search
          in: query
          description: Search contacts by name, email, mobile, or contact ID
          schema:
            type: string
        - name: type
          in: query
          description: Filter by contact type
          schema:
            type: string
            enum: [customer, supplier, both]
        - name: is_active
          in: query
          description: Filter by active status
          schema:
            type: boolean
      responses:
        '200':
          description: Contacts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Contacts retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Contact'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Transactions API
  /transactions:
    get:
      tags:
        - Transactions
      summary: List Transactions
      description: Retrieve a paginated list of transactions with advanced filtering
      parameters:
        - name: type
          in: query
          description: Filter by transaction type
          schema:
            type: string
            enum: [sell, purchase, expense, stock_adjustment]
        - name: status
          in: query
          description: Filter by transaction status
          schema:
            type: string
            enum: [draft, pending, final, received]
        - name: date_from
          in: query
          description: Start date filter (YYYY-MM-DD)
          schema:
            type: string
            format: date
        - name: date_to
          in: query
          description: End date filter (YYYY-MM-DD)
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Transactions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Transactions retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /transactions/{id}/payments:
    post:
      tags:
        - Transactions
      summary: Add Payment to Transaction
      description: Add a payment to an existing transaction
      parameters:
        - name: id
          in: path
          required: true
          description: Transaction ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentCreate'
      responses:
        '201':
          description: Payment added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '422':
          $ref: '#/components/responses/ValidationError'

  # Payments API
  /payments/invoices:
    get:
      tags:
        - Payments
      summary: List Invoices for Payment
      description: |
        Get a paginated list of invoices with payment status information. 
        Useful for payment management and outstanding invoice tracking.
      parameters:
        - name: payment_status
          in: query
          description: Filter by payment status
          schema:
            type: string
            enum: [due, partial, paid]
        - name: customer_id
          in: query
          description: Filter by specific customer
          schema:
            type: integer
        - name: search
          in: query
          description: Search by invoice number or customer name
          schema:
            type: string
        - name: per_page
          in: query
          description: Number of items per page (1-100)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 15
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        '200':
          description: Invoices retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedInvoiceResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /payments/invoice:
    get:
      tags:
        - Payments
      summary: Get Invoice Details by Invoice Number
      description: |
        Retrieve detailed information about a specific invoice by its invoice number.
        Returns invoice details, payment status, and customer information.
      parameters:
        - name: invoice_no
          in: query
          required: true
          description: Invoice number to look up
          schema:
            type: string
            example: "2024-0001"
      responses:
        '200':
          description: Invoice details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Invoice details retrieved successfully"
                  data:
                    $ref: '#/components/schemas/InvoiceDetails'
        '404':
          description: Invoice not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      tags:
        - Payments
      summary: Add Payment to Invoice
      description: |
        Add a payment to an existing invoice using the invoice number. 
        Automatically updates payment status and validates payment amounts.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - invoice_no
                - amount
                - payment_method
              properties:
                invoice_no:
                  type: string
                  description: Invoice number to add payment to
                  example: "2024-0001"
                amount:
                  type: number
                  format: decimal
                  minimum: 0.01
                  description: Payment amount
                  example: 150.00
                payment_method:
                  type: string
                  enum: [cash, card, bank_transfer, cheque, other]
                  description: Payment method
                  example: "bank_transfer"
                payment_note:
                  type: string
                  maxLength: 500
                  description: Optional payment note
                  example: "Bank transfer payment"
                payment_ref_no:
                  type: string
                  maxLength: 255
                  description: Payment reference number
                  example: "TXN123456789"
                payment_date:
                  type: string
                  format: date
                  description: Payment date (defaults to current date)
                  example: "2024-01-15"
      responses:
        '201':
          description: Payment added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Payment added successfully"
                  data:
                    $ref: '#/components/schemas/PaymentResponse'
        '404':
          description: Invoice not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  /payments/history:
    get:
      tags:
        - Payments
      summary: Get Payment History for Invoice
      description: |
        Retrieve complete payment history for a specific invoice by invoice number.
        Shows all payments made against the invoice with details.
      parameters:
        - name: invoice_no
          in: query
          required: true
          description: Invoice number to get payment history for
          schema:
            type: string
            example: "2024-0001"
      responses:
        '200':
          description: Payment history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Payment history retrieved successfully"
                  data:
                    $ref: '#/components/schemas/PaymentHistoryResponse'
        '404':
          description: Invoice not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  # Reports API
  /reports/dashboard:
    get:
      tags:
        - Reports
      summary: Dashboard Metrics
      description: Get comprehensive dashboard metrics and KPIs
      parameters:
        - name: start_date
          in: query
          description: Report start date (YYYY-MM-DD)
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          description: Report end date (YYYY-MM-DD)
          schema:
            type: string
            format: date
        - name: location_id
          in: query
          description: Filter by specific location
          schema:
            type: integer
      responses:
        '200':
          description: Dashboard metrics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Dashboard metrics retrieved successfully"
                  data:
                    $ref: '#/components/schemas/DashboardMetrics'

  /reports/sales-analytics:
    get:
      tags:
        - Reports
      summary: Sales Analytics
      description: Get detailed sales performance analytics
      parameters:
        - name: start_date
          in: query
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          schema:
            type: string
            format: date
        - name: location_id
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Sales analytics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Sales analytics retrieved successfully"
                  data:
                    $ref: '#/components/schemas/SalesAnalytics'

  # HRM (Human Resource Management)
  /hrm/users:
    get:
      tags:
        - HRM
      summary: List Users/Employees
      description: Retrieve a paginated list of users/employees with search and filter options
      parameters:
        - name: search
          in: query
          description: Search users by name, username, or email
          schema:
            type: string
        - name: is_active
          in: query
          description: Filter by active status
          schema:
            type: boolean
        - name: per_page
          in: query
          description: Number of items per page (1-100)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 25
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Users retrieved successfully"
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'

  /hrm/users/{id}:
    get:
      tags:
        - HRM
      summary: Get User Details
      description: Retrieve detailed information about a specific user including shift assignments
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      responses:
        '200':
          description: User details retrieved successfully
        '404':
          description: User not found

  /hrm/check-in:
    post:
      tags:
        - HRM
      summary: Employee Check-In
      description: Record employee arrival time and start attendance tracking
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
              properties:
                user_id:
                  type: integer
                  description: Employee ID
                  example: 1
                clock_in_time:
                  type: string
                  format: date-time
                  description: Check-in time (defaults to current time)
                  example: "2024-01-15 09:00:00"
                clock_in_note:
                  type: string
                  description: Optional check-in note
                  maxLength: 255
      responses:
        '200':
          description: Check-in successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Check-in successful"
                  data:
                    type: object
                    properties:
                      attendance:
                        $ref: '#/components/schemas/AttendanceRecord'

  /hrm/check-out:
    post:
      tags:
        - HRM
      summary: Employee Check-Out
      description: Record employee departure time and complete attendance tracking
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
              properties:
                user_id:
                  type: integer
                  description: Employee ID
                clock_out_time:
                  type: string
                  format: date-time
                  description: Check-out time (defaults to current time)
                clock_out_note:
                  type: string
                  description: Optional check-out note
                  maxLength: 255
      responses:
        '200':
          description: Check-out successful

  /hrm/overtime-in:
    post:
      tags:
        - HRM
      summary: Start Overtime Session
      description: Begin tracking overtime hours for an employee
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
              properties:
                user_id:
                  type: integer
                  description: Employee ID
                overtime_date:
                  type: string
                  format: date
                  description: Overtime date (defaults to today)
                start_time:
                  type: string
                  format: time
                  description: Overtime start time (defaults to current time)
                reason:
                  type: string
                  description: Reason for overtime
                  maxLength: 255
      responses:
        '200':
          description: Overtime session started successfully

  /hrm/overtime-out:
    post:
      tags:
        - HRM
      summary: End Overtime Session
      description: Complete overtime tracking and calculate total hours
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
              properties:
                user_id:
                  type: integer
                  description: Employee ID
                overtime_date:
                  type: string
                  format: date
                  description: Overtime date (defaults to today)
                end_time:
                  type: string
                  format: time
                  description: Overtime end time (defaults to current time)
      responses:
        '200':
          description: Overtime session ended successfully

  /hrm/attendance:
    get:
      tags:
        - HRM
      summary: Get Attendance Records
      description: Retrieve attendance records with filtering options
      parameters:
        - name: user_id
          in: query
          description: Filter by specific user ID
          schema:
            type: integer
        - name: start_date
          in: query
          description: Start date for filtering (YYYY-MM-DD)
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          description: End date for filtering (YYYY-MM-DD)
          schema:
            type: string
            format: date
        - name: per_page
          in: query
          schema:
            type: integer
            default: 25
      responses:
        '200':
          description: Attendance records retrieved successfully

  /hrm/overtime:
    get:
      tags:
        - HRM
      summary: Get Overtime Requests
      description: Retrieve overtime requests with filtering options
      parameters:
        - name: user_id
          in: query
          description: Filter by specific user ID
          schema:
            type: integer
        - name: status
          in: query
          description: Filter by status
          schema:
            type: string
            enum: [pending, approved, rejected]
        - name: start_date
          in: query
          description: Start date for filtering
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          description: End date for filtering
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Overtime requests retrieved successfully

  /hrm/overtime-request:
    post:
      tags:
        - HRM
      summary: Create Overtime Request
      description: Submit a formal overtime request for approval
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - overtime_date
                - start_time
                - end_time
                - reason
              properties:
                user_id:
                  type: integer
                  description: Employee ID
                overtime_date:
                  type: string
                  format: date
                  description: Date for overtime work
                start_time:
                  type: string
                  format: time
                  description: Overtime start time (HH:MM)
                  example: "18:00"
                end_time:
                  type: string
                  format: time
                  description: Overtime end time (HH:MM)
                  example: "20:00"
                reason:
                  type: string
                  description: Reason for overtime request
                  maxLength: 255
                description:
                  type: string
                  description: Additional details about the overtime work
                  maxLength: 500
      responses:
        '200':
          description: Overtime request created successfully

  # ============== POS API ENDPOINTS ==============
  /api/v1/pos/plastic-bags:
    get:
      tags:
        - POS
      summary: Get Available Plastic Bag Types
      description: Retrieve all available plastic bag types for POS sales
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: location_id
          in: query
          required: true
          schema:
            type: integer
          description: Business location ID for POS operations
      responses:
        '200':
          description: Plastic bag types retrieved successfully

  /api/v1/pos/sale:
    post:
      tags:
        - POS
      summary: Create POS Sale
      description: Create a comprehensive point of sale transaction with plastic bags, discounts, tax, shipping, and multiple payment methods
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - location_id
                - products
                - payment
              properties:
                location_id:
                  type: integer
                  example: 1
                  description: Business location ID
                contact_id:
                  type: integer
                  example: 123
                  description: Customer ID (optional for walk-in sales)
                products:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    required:
                      - quantity
                    anyOf:
                      - required: ["variation_id"]
                      - required: ["sku"]
                    properties:
                      variation_id:
                        type: integer
                        description: Product variation ID (use either this or sku)
                        example: 456
                      sku:
                        type: string
                        description: Product SKU (use either this or variation_id)
                        example: "0001"
                      quantity:
                        type: number
                        format: float
                        minimum: 0.01
                        example: 2.0
                      unit_price:
                        type: number
                        format: float
                        example: 10.50
                payment:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    required:
                      - method
                      - amount
                    properties:
                      method:
                        type: string
                        example: "cash"
                      amount:
                        type: number
                        format: float
                        example: 21.00
                plastic_bags:
                  type: array
                  description: Plastic bags to add to the sale
                  items:
                    type: object
                    required:
                      - type_id
                      - quantity
                    properties:
                      type_id:
                        type: integer
                        example: 1
                      quantity:
                        type: integer
                        minimum: 1
                        example: 2
                is_credit_sale:
                  type: boolean
                  example: false
                discount_amount:
                  type: number
                  format: float
                  example: 5.00
                discount_type:
                  type: string
                  enum: ["fixed", "percentage"]
                  example: "fixed"
                tax_id:
                  type: integer
                  example: 2
                shipping_charges:
                  type: number
                  format: float
                  example: 5.00
                sale_note:
                  type: string
                  maxLength: 1000
                  example: "Customer requested gift wrapping"
            example:
              location_id: 1
              contact_id: 123
              products:
                - sku: "0001"
                  quantity: 2
                  unit_price: 10.50
                - variation_id: 456
                  quantity: 1
                  unit_price: 15.00
              payment:
                - method: "cash"
                  amount: 21.50
              plastic_bags:
                - type_id: 1
                  quantity: 2
              discount_amount: 2.00
              discount_type: "fixed"
      responses:
        '200':
          description: Sale created successfully

  /api/v1/pos/product-suggestions:
    get:
      tags:
        - POS
      summary: Get Product Suggestions
      description: Search for products with real-time suggestions for point of sale
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: location_id
          in: query
          required: true
          schema:
            type: integer
        - name: term
          in: query
          schema:
            type: string
          description: Search term (product name, SKU, barcode)
      responses:
        '200':
          description: Product suggestions retrieved

  /api/v1/pos/product-row:
    get:
      tags:
        - POS
      summary: Get Product Row Data
      description: Get detailed product information for POS cart
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: variation_id
          in: query
          required: true
          schema:
            type: integer
        - name: location_id
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product row data retrieved

  /api/v1/pos/recent-transactions:
    get:
      tags:
        - POS
      summary: Get Recent POS Transactions
      description: Retrieve recent point of sale transactions
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: ["final", "draft", "quotation"]
            default: "final"
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: location_id
          in: query
          schema:
            type: integer
          description: Filter transactions by business location ID (optional)
      responses:
        '200':
          description: Recent transactions retrieved

  /api/v1/pos/settings:
    get:
      tags:
        - POS
      summary: Get POS Settings
      description: Retrieve POS configuration and business settings
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      responses:
        '200':
          description: POS settings retrieved

  /api/v1/pos/drafts:
    get:
      tags:
        - POS
      summary: Get POS Drafts
      description: Retrieve saved draft transactions from database
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filter by draft type
          schema:
            type: string
            enum: [draft, quotation]
            default: draft
      responses:
        '200':
          description: Drafts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      drafts:
                        type: array
                        items:
                          type: object
                          properties:
                            draft_id:
                              type: integer
                              example: 123
                            invoice_no:
                              type: string
                              example: "2025/0009"
                              description: "Auto-generated reference number"
                            location_id:
                              type: integer
                              example: 1
                            location_name:
                              type: string
                              example: "Main Store"
                            contact_id:
                              type: integer
                              nullable: true
                              example: 5
                            contact_name:
                              type: string
                              nullable: true
                              example: "John Doe"
                            product_count:
                              type: integer
                              example: 3
                            quotation_id:
                              type: string
                              nullable: true
                            reference:
                              type: string
                              nullable: true
                            notes:
                              type: string
                              nullable: true
                            created_at:
                              type: string
                              format: date-time
    post:
      tags:
        - POS
      summary: Save POS Draft
      description: Save current transaction as draft in database
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - location_id
                - products
              properties:
                location_id:
                  type: integer
                  example: 1
                  description: Required business location ID
                contact_id:
                  type: integer
                  nullable: true
                  example: 5
                products:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    required:
                      - variation_id
                      - quantity
                      - unit_price
                    properties:
                      variation_id:
                        type: integer
                        example: 10
                      quantity:
                        type: number
                        minimum: 0.01
                        example: 2.0
                      unit_price:
                        type: number
                        minimum: 0
                        example: 25.50
                quotation_id:
                  type: string
                  nullable: true
                reference:
                  type: string
                  nullable: true
                notes:
                  type: string
                  nullable: true
      responses:
        '201':
          description: Draft saved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      draft_id:
                        type: integer
                        example: 123
                      invoice_no:
                        type: string
                        example: "2025/0009"
                        description: "Auto-generated reference number"
                      location_id:
                        type: integer
                        example: 1
                      contact_id:
                        type: integer
                        nullable: true
                        example: 5
  /api/v1/pos/drafts/{draft_id}:
    get:
      tags:
        - POS
      summary: Load POS Draft
      description: Load a specific draft transaction by ID
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: draft_id
          in: path
          required: true
          schema:
            type: integer
            example: 123
      responses:
        '200':
          description: Draft loaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      draft:
                        type: object
                        properties:
                          draft_id:
                            type: integer
                            example: 123
                          invoice_no:
                            type: string
                            example: "2025/0009"
                            description: "Auto-generated reference number"
                          location_id:
                            type: integer
                            example: 1
                          location_name:
                            type: string
                            example: "Main Store"
                          contact_id:
                            type: integer
                            nullable: true
                            example: 5
                          contact_name:
                            type: string
                            nullable: true
                            example: "John Doe"
                          products:
                            type: array
                            items:
                              type: object
                              properties:
                                variation_id:
                                  type: integer
                                quantity:
                                  type: number
                                unit_price:
                                  type: number
                          quotation_id:
                            type: string
                            nullable: true
                          reference:
                            type: string
                            nullable: true
                          notes:
                            type: string
                            nullable: true
                          transaction_date:
                            type: string
                            format: date-time
                          created_at:
                            type: string
                            format: date-time
        '404':
          description: Draft not found
    delete:
      tags:
        - POS
      summary: Delete POS Draft
      description: Delete a specific draft transaction by ID
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - name: draft_id
          in: path
          required: true
          schema:
            type: integer
            example: 123
      responses:
        '200':
          description: Draft deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '404':
          description: Draft not found

  /api/v1/pos/business-info:
    get:
      tags:
        - POS
      summary: Get Business Information
      description: |
        Retrieve comprehensive business information including details, locations, currency settings, and more.
        
        **Important Note**: Use this endpoint to get valid `location_id` values for POS operations. All POS operations require a valid `location_id` that belongs to your business.
        
        **Location IDs are required for**:
        - Creating POS sales
        - Saving drafts
        - Getting product suggestions
        - All location-specific POS operations
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      responses:
        '200':
          description: Business information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      business:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          name:
                            type: string
                            example: "IsleBooks Store"
                          owner_name:
                            type: string
                            example: "John Doe"
                          email:
                            type: string
                            example: "owner@islebooks.mv"
                          website:
                            type: string
                            nullable: true
                            example: "https://islebooks.mv"
                          logo:
                            type: string
                            nullable: true
                            example: "https://pos.islebooks.mv/uploads/business_logos/logo.png"
                          time_zone:
                            type: string
                            example: "UTC"
                          currency:
                            type: object
                            properties:
                              symbol:
                                type: string
                                example: "MVR"
                              code:
                                type: string
                                example: "MVR"
                              symbol_placement:
                                type: string
                                enum: [before, after]
                                example: "before"
                              thousand_separator:
                                type: string
                                example: ","
                              decimal_separator:
                                type: string
                                example: "."
                          financial_year_start:
                            type: integer
                            example: 1
                            description: "Financial year start month (1-12)"
                          created_at:
                            type: string
                            format: date-time
                      locations:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                              description: "Use this ID for location_id in POS operations"
                            name:
                              type: string
                              example: "Main Store"
                            address:
                              type: string
                              example: "Kurinbi, HDh, Maldives"
                            zip_code:
                              type: string
                              nullable: true
                              example: "20026"
                            is_active:
                              type: boolean
                              example: true
        '404':
          description: Business not found

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API Key authentication
    BearerAuth:
      type: http
      scheme: bearer
      description: Bearer token authentication

  schemas:
    # Core Models
    Product:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "MacBook Pro 13\""
        sku:
          type: string
          example: "MBP-13-001"
        type:
          type: string
          enum: [single, variable]
          example: "variable"
        unit_id:
          type: integer
          example: 1
        brand_id:
          type: integer
          example: 1
        category_id:
          type: integer
          example: 1
        tax_id:
          type: integer
          example: 1
        is_active:
          type: boolean
          example: true
        description:
          type: string
          example: "13-inch MacBook Pro with M2 chip"
        image_url:
          type: string
          example: "/uploads/products/macbook-pro-13.jpg"
        variations:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariation'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ProductVariation:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "M2 256GB"
        sub_sku:
          type: string
          example: "MBP-13-M2-256"
        default_purchase_price:
          type: number
          format: float
          example: 1200.00
        default_sell_price:
          type: number
          format: float
          example: 1499.00
        stock:
          type: array
          items:
            $ref: '#/components/schemas/StockDetails'

    StockDetails:
      type: object
      properties:
        location_id:
          type: integer
          example: 1
        location_name:
          type: string
          example: "Main Store"
        qty_available:
          type: number
          format: float
          example: 15.00

    Contact:
      type: object
      properties:
        id:
          type: integer
          example: 1
        type:
          type: string
          enum: [customer, supplier, both]
          example: "customer"
        name:
          type: string
          example: "John Smith"
        contact_id:
          type: string
          example: "CUST-001"
        business_name:
          type: string
          example: "Smith Enterprises"
        contact_info:
          type: object
          properties:
            mobile:
              type: string
              example: "+1234567890"
            email:
              type: string
              example: "john@smith.com"
            landline:
              type: string
              example: "+1234567891"
        address:
          type: object
          properties:
            address_line_1:
              type: string
              example: "123 Main Street"
            city:
              type: string
              example: "New York"
            state:
              type: string
              example: "NY"
            country:
              type: string
              example: "USA"
            zip_code:
              type: string
              example: "10001"
        financial:
          type: object
          properties:
            credit_limit:
              type: number
              format: float
              example: 5000.00
            opening_balance:
              type: number
              format: float
              example: 0.00
        settings:
          type: object
          properties:
            is_active:
              type: boolean
              example: true

    Transaction:
      type: object
      properties:
        id:
          type: integer
          example: 1
        type:
          type: string
          enum: [sell, purchase, expense, stock_adjustment]
          example: "sell"
        status:
          type: string
          enum: [draft, pending, final, received]
          example: "final"
        ref_no:
          type: string
          example: "TXN-2024-001"
        transaction_date:
          type: string
          format: date
          example: "2024-01-15"
        totals:
          type: object
          properties:
            final_total:
              type: number
              format: float
              example: 1299.00
            tax_amount:
              type: number
              format: float
              example: 99.00
        payment_info:
          type: object
          properties:
            payment_status:
              type: string
              enum: [paid, partial, due]
              example: "paid"
            total_paid:
              type: number
              format: float
              example: 1299.00
        contact:
          $ref: '#/components/schemas/ContactBasic'
        location:
          $ref: '#/components/schemas/LocationBasic'

    ContactBasic:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Smith"
        contact_id:
          type: string
          example: "CUST-001"

    LocationBasic:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Main Store"

    DashboardMetrics:
      type: object
      properties:
        period:
          type: object
          properties:
            start_date:
              type: string
              format: date
            end_date:
              type: string
              format: date
        sales:
          type: object
          properties:
            count:
              type: integer
              example: 156
            total:
              type: number
              format: float
              example: 45750.00
            average_per_sale:
              type: number
              format: float
              example: 293.27
        profitability:
          type: object
          properties:
            gross_profit:
              type: number
              format: float
              example: 12500.00
            net_profit:
              type: number
              format: float
              example: 8750.00
            gross_margin_percent:
              type: number
              format: float
              example: 27.3

    SalesAnalytics:
      type: object
      properties:
        period:
          type: object
          properties:
            start_date:
              type: string
              format: date
            end_date:
              type: string
              format: date
        daily_trend:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              transaction_count:
                type: integer
              total_sales:
                type: number
                format: float
        top_customers:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
              total_purchases:
                type: number
                format: float

    # Request Schemas
    ProductCreate:
      type: object
      required:
        - name
        - type
        - unit_id
        - opening_stock
      properties:
        name:
          type: string
          example: "MacBook Pro 13\""
        type:
          type: string
          enum: [single, variable]
        sku:
          type: string
          example: "MBP-13-001"
        description:
          type: string
        unit_id:
          type: integer
          example: 1
        brand_id:
          type: integer
        category_id:
          type: integer
        tax_id:
          type: integer
        is_active:
          type: boolean
          default: true
        opening_stock:
          type: array
          minItems: 1
          description: Required - at least one location must be specified for opening stock
          items:
            type: object
            required:
              - location_id
              - quantity
              - unit_price
            properties:
              location_id:
                type: string
                description: Location code (BL0003) or table ID
                example: "BL0003"
              quantity:
                type: number
                minimum: 0
                example: 100
              unit_price:
                type: number
                minimum: 0
                example: 15.00
        variations:
          type: array
          description: Required for variable products
          items:
            type: object
            required:
              - name
              - default_purchase_price
              - default_sell_price
            properties:
              name:
                type: string
                example: "Medium Roast"
              default_purchase_price:
                type: number
                example: 15.00
              default_sell_price:
                type: number
                example: 25.00
              profit_percent:
                type: number
                example: 40

    PaymentCreate:
      type: object
      required:
        - amount
        - method
      properties:
        amount:
          type: number
          format: float
          minimum: 0.01
          example: 1299.00
        method:
          type: string
          enum: [cash, card, cheque, bank_transfer, other]
          example: "card"
        paid_on:
          type: string
          format: date
        note:
          type: string
          example: "Payment via credit card"

    InvoiceDetails:
      type: object
      properties:
        id:
          type: integer
          example: 1
        invoice_no:
          type: string
          example: "2024-0001"
        transaction_date:
          type: string
          format: date
          example: "2024-01-15"
        total_amount:
          type: number
          format: float
          example: 1500.00
        total_paid:
          type: number
          format: float
          example: 500.00
        due_amount:
          type: number
          format: float
          example: 1000.00
        payment_status:
          type: string
          enum: [due, partial, paid]
          example: "partial"
        customer:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: "John Doe"
            mobile:
              type: string
              example: "+1234567890"
        location:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: "Main Store"

    PaymentResponse:
      type: object
      properties:
        payment_id:
          type: integer
          example: 1
        transaction_id:
          type: integer
          example: 1
        invoice_no:
          type: string
          example: "2024-0001"
        amount_paid:
          type: number
          format: float
          example: 500.00
        total_paid:
          type: number
          format: float
          example: 1000.00
        remaining_due:
          type: number
          format: float
          example: 500.00
        payment_status:
          type: string
          enum: [due, partial, paid]
          example: "partial"
        payment_ref_no:
          type: string
          example: "TXN123456789"
        paid_on:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00.000Z"

    PaymentHistoryResponse:
      type: object
      properties:
        invoice_no:
          type: string
          example: "2024-0001"
        total_amount:
          type: number
          format: float
          example: 1500.00
        total_paid:
          type: number
          format: float
          example: 1000.00
        due_amount:
          type: number
          format: float
          example: 500.00
        payment_status:
          type: string
          enum: [due, partial, paid]
          example: "partial"
        payments:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              amount:
                type: number
                format: float
                example: 500.00
              method:
                type: string
                enum: [cash, card, bank_transfer, cheque, other]
                example: "bank_transfer"
              payment_ref_no:
                type: string
                example: "TXN123456789"
              note:
                type: string
                example: "Bank transfer payment"
              paid_on:
                type: string
                format: date-time
                example: "2024-01-15T10:30:00.000Z"
              created_by:
                type: string
                example: "John Admin"
              created_at:
                type: string
                format: date-time
                example: "2024-01-15T10:30:00.000Z"

    PaginatedInvoiceResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Invoices retrieved successfully"
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              invoice_no:
                type: string
                example: "2024-0001"
              transaction_date:
                type: string
                format: date
                example: "2024-01-15"
              total_amount:
                type: number
                format: float
                example: 1500.00
              total_paid:
                type: number
                format: float
                example: 500.00
              due_amount:
                type: number
                format: float
                example: 1000.00
              payment_status:
                type: string
                enum: [due, partial, paid]
                example: "partial"
              customer:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: "John Doe"
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    # Response Schemas  
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"
        data:
          type: object

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "An error occurred"
        errors:
          type: object

    ValidationErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Validation failed"
        errors:
          type: object
          example:
            name: ["The name field is required."]
            email: ["The email field must be a valid email address."]

    PaginationMeta:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        from:
          type: integer
          example: 1
        last_page:
          type: integer
          example: 10
        per_page:
          type: integer
          example: 15
        to:
          type: integer
          example: 15
        total:
          type: integer
          example: 143

  responses:
    Unauthorized:
      description: Unauthorized - Invalid or missing API key
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: "Invalid API key"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: "Resource not found"

    ValidationError:
      description: Validation error - Invalid input data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrorResponse'

    # HRM Schemas
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Doe"
        username:
          type: string
          example: "john.doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        mobile:
          type: string
          example: "+1234567890"
        status:
          type: string
          enum: [active, inactive]
          example: "active"
        is_active:
          type: boolean
          example: true
        join_date:
          type: string
          format: date
          example: "2024-01-15"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00.000Z"

    AttendanceRecord:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        employee_name:
          type: string
          example: "John Doe"
        date:
          type: string
          format: date
          example: "2024-01-15"
        clock_in_time:
          type: string
          format: date-time
          example: "2024-01-15T09:00:00"
        clock_out_time:
          type: string
          format: date-time
          example: "2024-01-15T17:00:00"
          nullable: true
        total_hours:
          type: number
          format: float
          example: 8.0
          nullable: true
        status:
          type: string
          enum: [active, completed]
          example: "completed"
        clock_in_note:
          type: string
          example: "On time arrival"
          nullable: true
        clock_out_note:
          type: string
          example: "Normal departure"
          nullable: true

    OvertimeRequest:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        employee_name:
          type: string
          example: "John Doe"
        overtime_date:
          type: string
          format: date
          example: "2024-01-15"
        start_time:
          type: string
          format: time
          example: "18:00"
        end_time:
          type: string
          format: time
          example: "20:00"
        hours_requested:
          type: number
          format: float
          example: 2.0
        approved_hours:
          type: number
          format: float
          example: 2.0
          nullable: true
        overtime_type:
          type: string
          enum: [workday, weekend, holiday]
          example: "workday"
        multiplier_rate:
          type: number
          format: float
          example: 1.5
        total_amount:
          type: number
          format: float
          example: 150.00
          nullable: true
        status:
          type: string
          enum: [pending, approved, rejected]
          example: "pending"
        reason:
          type: string
          example: "Project deadline"
        description:
          type: string
          example: "Need to complete client presentation"
          nullable: true
        approved_by_name:
          type: string
          example: "Manager Name"
          nullable: true
        approved_at:
          type: string
          format: date-time
          example: "2024-01-15T16:00:00.000Z"
          nullable: true
        rejection_reason:
          type: string
          example: "Budget constraints"
          nullable: true
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T14:30:00.000Z"

tags:
  - name: Health
    description: API health and status endpoints
  - name: Products
    description: Product and inventory management
  - name: Categories
    description: Product category management with hierarchical support
  - name: Brands
    description: Brand management for products and repairs
  - name: Contacts  
    description: Customer and supplier management
  - name: Transactions
    description: Sales, purchases, and payment management
  - name: Reports
    description: Analytics and business intelligence
  - name: HRM
    description: Human resource management, attendance, and overtime
  - name: POS
    description: Point of Sale operations with plastic bags, discounts, and payments
  - name: Payments
    description: Invoice-based payment management and processing